name: Build for PCs

on: [push, pull_request]

env:
  BUILD_TYPE: Release
  # Which SDL2 version to build
  SDL2_VERSION: 2.0.14

jobs:

  build_msvc:
    name: Windows, Visual Studio

    # note: pin when needed
    # FIXME: hardcoded generators
    runs-on: windows-latest
  
    strategy:
      matrix:
        arch: [Win32, x64]

    steps:
    - uses: actions/checkout@v2

    - uses: lukka/get-cmake@latest

    - name: Cache SDL2 build
      id: cache-sdl2
      uses: actions/cache@v2
      with:
        path: SDL
        key: win-msvc-sdl2-${{ env.SDL2_VERSION }}-${{ matrix.arch }}

    - name: Build SDL2
      if: steps.cache-sdl2.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch release-$env:SDL2_VERSION https://github.com/SDL-mirror/SDL.git SDL
        cd SDL
        mkdir build && cd build
        cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.arch }}
        cmake --build .
      
    - name: Install SDL2
      run: cmake --install SDL\build --config Debug

    - run: |
        mkdir build
        cmake -E make_directory build

    - name: Configure CMake
      working-directory: build
      run: |
        cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.arch }} -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE -DMSVC_LINK_STATIC_RUNTIME=ON -DPKG_CONFIG_STATIC_LIBS=ON

    - name: Build
      working-directory: build
      run: |
        cmake --build . --config $env:BUILD_TYPE

    - name: Upload bin/SoniCPort.exe
      uses: actions/upload-artifact@v2
      with:
        path: bin
        name: SoniCPort-msvc-${{ matrix.arch }}

  build_mingw:
    name: Windows, MinGW-w64 Windows

    runs-on: windows-latest

    strategy:
      matrix:
        include:
          - pinning: x86
            CFLAGS: -m32
            cc_name: i686
            #CMAKE_MAKE_PROGRAM: make
            #CXXFLAGS: -m32
          - pinning: x64
            CFLAGS: -m64
            cc_name: x86_64
            #CMAKE_MAKE_PROGRAM: mingw32-make
            #CXXFLAGS: -m64
    
    env:
      CMK_CMDLINE_OPTS: -DCMAKE_C_COMPILER=${{ matrix.cc_name }}-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=${{ matrix.cc_name }}-w64-mingw32-g++ -DCMAKE_C_FLAGS=${{ matrix.CFLAGS }} -DCMAKE_CXX_FLAGS=${{ matrix.CFLAGS }} -DCMAKE_EXE_LINKER_FLAGS=${{ matrix.CFLAGS }} -DCMAKE_SHARED_LIBRARY_C_FLAGS=${{ matrix.CFLAGS }} -DCMAKE_SHARED_LIBRARY_CXX_FLAGS=${{ matrix.CFLAGS }}
      #CC: ${{ matrix.cc_name }}-w64-mingw32-gcc
      #CXX: ${{ matrix.cc_name }}-w64-mingw32-g++
  
    steps:
    - uses: actions/checkout@v2

    - uses: lukka/get-cmake@latest

    - run: |
        cmake -E make_directory build
  
      - uses: actions/cache@v2
        with:
          path: ${{ env.TEMP }}\chocolatey
          key: win-mingw-chocolatey-10
    
    - name: Upgrade MinGW-w64
      if: matrix.pinning != 'x86'
      run: |
        choco upgrade mingw -y
        refreshenv
        $path = where.exe mingw32-make.exe | Get-Item
        Copy-Item -Path $path -Destination (Join-Path $path.Directory 'make.exe')
  
    #you can't cross compile without this
    - name: Install 32-bit MinGW-w64
      if: matrix.pinning == 'x86'
      run: |
        choco uninstall mingw
        choco install mingw --x86 -y
        refreshenv
        choco install make
        copy C:\ProgramData\chocolatey\bin\make.exe C:\ProgramData\chocolatey\bin\mingw32-make.exe
      
    - name: Cache SDL2 build
      id: cache-sdl2
      uses: actions/cache@v2
      with:
        path: SDL
        key: win-mingw-sdl2-${{ env.SDL2_VERSION }}-${{ matrix.pinning }}-gcc10
        restore-keys: |
          win-mingw-sdl2---gcc10
          win-mingw-sdl2-${{ env.SDL2_VERSION }}--gcc10
  
    - name: Build SDL2
      if: steps.cache-sdl2.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch release-$env:SDL2_VERSION https://github.com/SDL-mirror/SDL.git SDL
        cd SDL
        mkdir build && cd build
        cmake .. -G "MinGW Makefiles" ${{ env.CMK_CMDLINE_OPTS }}
        cmake --build .
      
    - name: Install SDL2
      run: cmake --install SDL\build
      
    - name: Configure CMake
      working-directory: build
      run: |
        cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE -DPKG_CONFIG_STATIC_LIBS=ON ${{ env.CMK_CMDLINE_OPTS }}

    - name: Build
      working-directory: build
      run: |
        cmake --build . --config $env:BUILD_TYPE
    
    - name: Upload bin/SoniCPort.exe
      uses: actions/upload-artifact@v2
      with:
        path: bin
        name: SoniCPort-mingw-${{ matrix.pinning }}

  build_linux_gcc:
    # TODO: maybe we should add a Clang one. GCC is the stablest for now
    name: Linux, GCC
  
    # WARNING: will change
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # - uses: lukka/get-cmake@latest

    # FIXME?: installing SDL2 from Ubuntu's offical package archive instead
    # TODO: will this work in ubuntu-20.04? seems like it's not restricted to one version though
    - name: Install SDL2
      run: |
        sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
        sudo apt-get update -y -qq
        sudo apt-get install libsdl2-dev

    - run: |
        cmake -E make_directory build

    - name: Configure CMake
      working-directory: build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: build
      run: |
        cmake --build . --config $BUILD_TYPE
    
    # i shouldn't upload it but people need to check
    - name: Upload bin/SoniCPort
      uses: actions/upload-artifact@v2
      with:
        path: bin
        name: SoniCPort-linux-x86_64-shared
